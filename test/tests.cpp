// tests.cpp
#include <trevisan.cpp>
#include <gtest/gtest.h>

TEST(GF2PolyTest, Example) {
    GF2Poly poly = GF2Poly(4);
    poly_bits x = poly_bits(0b1101);
    poly_bits y = poly_bits(0b0101);

    poly_bits xy = poly_bits(0b1100);

    ASSERT_EQ(xy, poly.poly_mul(x, y));
}

typedef tuple<int, int, int, vector<uint64_t>> HRExample;

vector<HRExample> hr_examples = {
    {121, 2, 7, {3, 6, 9, 12}},
    {42, 2, 40, {0, 4, 10, 14}},
    {181, 2, 48, {0, 7, 10, 13}},
    {141, 2, 6, {2, 7, 8, 13}},
    {86, 2, 42, {2, 6, 8, 12}},
    {1585451, 3, 1111387, {3, 13, 16, 30, 33, 43, 53, 63}},
    {14429011, 3, 10924101, {5, 14, 22, 24, 35, 42, 49, 56}},
    {9412952, 3, 536846, {6, 10, 18, 26, 36, 43, 50, 57}},
    {1020535, 3, 957551, {7, 10, 23, 28, 36, 42, 52, 60}},
    {4344458, 3, 3265585, {1, 14, 18, 31, 33, 44, 54, 56}},
};

typedef tuple<int, int, int, vector<uint64_t>> BWDExample;

vector<BWDExample> bwd_examples = {
    {50, 3, 7, {7, 15, 23, 31, 39, 47, 55, 63}},
    {50, 3, 32, {384, 392, 400, 408, 416, 424, 432, 440}},
    {50, 3, 4, {4, 12, 20, 28, 36, 44, 52, 60}},
    {50, 3, 20, {133, 141, 149, 157, 165, 173, 181, 189}},
    {50, 3, 9, {64, 72, 80, 88, 96, 104, 112, 120}},
    {500, 4, 16, {0, 17, 34, 51, 68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255}},
    {500, 4, 237, {779, 795, 811, 827, 843, 859, 875, 891, 907, 923, 939, 955, 971, 987, 1003, 1019}},
    {500, 4, 56, {8, 27, 46, 61, 68, 87, 98, 113, 131, 144, 165, 182, 207, 220, 233, 250}},
    {500, 4, 197, {527, 542, 557, 572, 587, 602, 617, 632, 647, 662, 677, 692, 707, 722, 737, 752}},
    {500, 4, 356, {1543, 1559, 1575, 1591, 1607, 1623, 1639, 1655, 1671, 1687, 1703, 1719, 1735, 1751, 1767, 1783}},
    {5000, 5, 4646, {13318, 13350, 13382, 13414, 13446, 13478, 13510, 13542, 13574, 13606, 13638, 13670, 13702, 13734, 13766, 13798, 13830, 13862, 13894, 13926, 13958, 13990, 14022, 14054, 14086, 14118, 14150, 14182, 14214, 14246, 14278, 14310}},
    {5000, 5, 2748, {3091, 3133, 3151, 3169, 3214, 3232, 3282, 3324, 3340, 3362, 3408, 3454, 3473, 3519, 3533, 3555, 3592, 3622, 3668, 3706, 3733, 3771, 3785, 3815, 3863, 3897, 3915, 3941, 3978, 4004, 4054, 4088}},
    {5000, 5, 1787, {2070, 2101, 2128, 2163, 2202, 2233, 2268, 2303, 2318, 2349, 2376, 2411, 2434, 2465, 2500, 2535, 2563, 2592, 2629, 2662, 2703, 2732, 2761, 2794, 2843, 2872, 2909, 2942, 2967, 2996, 3025, 3058}},
    {5000, 5, 1807, {2058, 2094, 2114, 2150, 2202, 2238, 2258, 2294, 2319, 2347, 2375, 2403, 2463, 2491, 2519, 2547, 2560, 2596, 2632, 2668, 2704, 2740, 2776, 2812, 2821, 2849, 2893, 2921, 2965, 2993, 3037, 3065}},
    {5000, 5, 1673, {2052, 2084, 2116, 2148, 2180, 2212, 2244, 2276, 2308, 2340, 2372, 2404, 2436, 2468, 2500, 2532, 2564, 2596, 2628, 2660, 2692, 2724, 2756, 2788, 2820, 2852, 2884, 2916, 2948, 2980, 3012, 3044}},
    {50000, 6, 14285, {4129, 4207, 4283, 4341, 4365, 4419, 4503, 4569, 4633, 4695, 4739, 4813, 4917, 4987, 5039, 5089, 5144, 5206, 5250, 5324, 5428, 5498, 5550, 5600, 5664, 5742, 5818, 5876, 5900, 5954, 6038, 6104, 6200, 6262, 6306, 6380, 6420, 6490, 6542, 6592, 6656, 6734, 6810, 6868, 6956, 7010, 7094, 7160, 7169, 7247, 7323, 7381, 7469, 7523, 7607, 7673, 7737, 7799, 7843, 7917, 7957, 8027, 8079, 8129}},
    {50000, 6, 20916, {8247, 8311, 8369, 8433, 8483, 8547, 8613, 8677, 8764, 8828, 8890, 8954, 9000, 9064, 9134, 9198, 9259, 9323, 9389, 9453, 9535, 9599, 9657, 9721, 9760, 9824, 9894, 9958, 10036, 10100, 10162, 10226, 10279, 10343, 10401, 10465, 10547, 10611, 10677, 10741, 10796, 10860, 10922, 10986, 11064, 11128, 11198, 11262, 11323, 11387, 11453, 11517, 11567, 11631, 11689, 11753, 11824, 11888, 11958, 12022, 12068, 12132, 12194, 12258}},
    {50000, 6, 13820, {4112, 4185, 4228, 4301, 4384, 4457, 4532, 4605, 4624, 4697, 4740, 4813, 4896, 4969, 5044, 5117, 5146, 5203, 5262, 5319, 5418, 5475, 5566, 5623, 5658, 5715, 5774, 5831, 5930, 5987, 6078, 6135, 6188, 6245, 6328, 6385, 6428, 6485, 6536, 6593, 6700, 6757, 6840, 6897, 6940, 6997, 7048, 7105, 7206, 7279, 7346, 7419, 7446, 7519, 7554, 7627, 7718, 7791, 7858, 7931, 7958, 8031, 8066, 8139}},
    {50000, 6, 26657, {12344, 12355, 12429, 12534, 12561, 12650, 12708, 12767, 12841, 12882, 12956, 13031, 13056, 13179, 13237, 13262, 13338, 13409, 13487, 13524, 13619, 13640, 13702, 13821, 13835, 13936, 14014, 14021, 14114, 14169, 14231, 14316, 14399, 14404, 14474, 14577, 14614, 14701, 14755, 14808, 14894, 14933, 15003, 15072, 15111, 15228, 15282, 15305, 15389, 15462, 15528, 15571, 15668, 15695, 15745, 15866, 15884, 15991, 16057, 16066, 16165, 16222, 16272, 16363}},
    {50000, 6, 47551, {57356, 57419, 57474, 57541, 57616, 57687, 57758, 57817, 57908, 57971, 58042, 58109, 58152, 58223, 58278, 58337, 58431, 58488, 58545, 58614, 58659, 58724, 58797, 58858, 58887, 58944, 59017, 59086, 59163, 59228, 59285, 59346, 59433, 59502, 59559, 59616, 59701, 59762, 59835, 59900, 59921, 59990, 60063, 60120, 60173, 60234, 60291, 60356, 60442, 60509, 60564, 60627, 60678, 60737, 60808, 60879, 60962, 61029, 61100, 61163, 61246, 61305, 61360, 61431}}
};

typedef tuple<int, int, vector<bool>, vector<bool>, bool> RSHExample;

vector<RSHExample> rsh_examples = {
    {20, 5, {0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1}, {0, 1, 1, 0, 1, 1, 1, 0, 0, 0}, 1},
    {20, 5, {0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1}, {0, 1, 0, 0, 0, 1, 0, 0, 1, 1}, 1},
    {20, 5, {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0}, {1, 1, 0, 1, 0, 1, 0, 1, 0, 0}, 0},
    {20, 5, {1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0}, {1, 1, 1, 0, 0, 1, 1, 0, 0, 1}, 1},
    {20, 5, {1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0}, {1, 1, 0, 1, 1, 1, 0, 0, 1, 0}, 0},
    {20, 5, {0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1}, {0, 1, 1, 1, 0, 1, 1, 0, 0, 0}, 0},
    {20, 5, {0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0}, {0, 0, 1, 1, 1, 1, 1, 1, 0, 0}, 1},
    {20, 5, {1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1}, {1, 0, 1, 0, 0, 1, 0, 0, 0, 0}, 0},
    {20, 5, {1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1}, {1, 1, 0, 1, 1, 1, 0, 0, 0, 1}, 1},
    {20, 5, {0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0}, {0, 0, 0, 0, 1, 1, 0, 1, 0, 0}, 1},
    {20, 5, {1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1}, {0, 1, 0, 1, 1, 0, 1, 1, 0, 0}, 0},
    {20, 5, {1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1}, {0, 0, 1, 1, 0, 0, 1, 0, 1, 0}, 0},
    {20, 5, {0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1}, {0, 0, 0, 0, 1, 1, 0, 1, 1, 0}, 0},
    {20, 5, {0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1}, {0, 1, 1, 0, 1, 0, 0, 1, 1, 1}, 1},
    {20, 5, {1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1}, {1, 0, 1, 0, 0, 1, 1, 1, 1, 1}, 1},
    {20, 5, {1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1}, {0, 1, 0, 1, 0, 1, 0, 0, 0, 1}, 1},
    {20, 5, {0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0}, {1, 0, 0, 0, 0, 1, 1, 0, 1, 1}, 1},
    {20, 5, {1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1}, {0, 0, 0, 1, 0, 1, 0, 0, 1, 1}, 1},
    {20, 5, {1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1}, {0, 0, 1, 1, 0, 0, 0, 1, 0, 1}, 0},
    {20, 5, {0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1}, {0, 1, 0, 0, 1, 0, 1, 0, 0, 0}, 1},
    {23, 3, {1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0}, {0, 1, 1, 0, 1, 1}, 1},
    {23, 3, {1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0}, {0, 1, 1, 0, 1, 0}, 1},
    {23, 3, {1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0}, {1, 0, 1, 0, 0, 1}, 0},
    {23, 3, {1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1}, {1, 1, 0, 1, 0, 0}, 1},
    {23, 3, {0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0}, {0, 0, 1, 0, 1, 1}, 0},
    {23, 3, {1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1}, {0, 0, 1, 1, 1, 0}, 1},
    {23, 3, {0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1}, {0, 1, 1, 0, 0, 0}, 0},
    {23, 3, {0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0}, {1, 1, 1, 1, 0, 0}, 0},
    {23, 3, {0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1}, {1, 1, 0, 0, 1, 0}, 1},
    {23, 3, {1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0}, {0, 1, 0, 1, 1, 0}, 0},
    {23, 3, {0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1}, {1, 0, 0, 0, 0, 0}, 0},
    {23, 3, {0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0}, {0, 1, 1, 1, 0, 1}, 0},
    {23, 3, {1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1}, {1, 1, 1, 0, 0, 0}, 0},
    {23, 3, {0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0}, {1, 0, 0, 1, 1, 1}, 0},
    {23, 3, {0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1}, {1, 0, 1, 1, 0, 0}, 0},
    {23, 3, {1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1}, {0, 1, 1, 1, 0, 1}, 0},
    {23, 3, {1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0}, {0, 1, 0, 1, 1, 0}, 1},
    {23, 3, {0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0}, {0, 1, 1, 0, 0, 0}, 0},
    {23, 3, {0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1}, {0, 1, 1, 1, 1, 1}, 1},
    {23, 3, {0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0}, {1, 1, 0, 1, 0, 0}, 0},
};


TEST(HRTest, Example) {
    for (auto ex : hr_examples) {
        int m = get<0>(ex), log_t = get<1>(ex), i = get<2>(ex);

        auto result = get<3>(ex);
        ASSERT_EQ(result, HRWeakDesign(m, log_t).get_s(i));
    }
}


TEST(BWDTest, Example) {
    for (auto ex : bwd_examples) {
        int m = get<0>(ex), log_t = get<1>(ex), i = get<2>(ex);

        auto result = get<3>(ex);
        EXPECT_EQ(result, BlockWeakDesign(m, log_t).get_s(i));
    }
}


TEST(RSHTest, Example) {
    for (auto ex : rsh_examples) {
        int n = get<0>(ex), l = get<1>(ex);
        vector<bool> r_input = get<2>(ex), r_seed = get<3>(ex);

        int result = get<4>(ex);
        EXPECT_EQ(result, RSHExtractor(n, l).extract(r_input, r_seed));
    }
}

TEST(TimingTest, Example) {
    int n = 1000;
    int k = 200;
    vector<bool> r_input;
    vector<bool> r_seed;

    auto trevisan = new Trevisan(TrevisanConfig(n, k, 0.01));

    for (int i = 0; i < n; i++) {
        r_input.push_back(rand() % 2);
    }

    for (int i = 0; i < trevisan->get_seed_length(); i++) {
        r_seed.push_back(rand() % 2);
    }

    trevisan->load_source(r_input, r_seed);
    for (int i = 0; i < 10; i++) {
        auto result = trevisan->extract();
        trevisan->load_source(r_input, r_seed);
    }
}


int main(int argc, char **argv) {
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
