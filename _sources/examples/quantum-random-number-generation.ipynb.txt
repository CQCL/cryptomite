{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "d03f7a0a",
   "metadata": {},
   "source": [
    "# Quantum Random Number Generation\n",
    "\n",
    "In quantum random number generation (QRNG), randomness extraction is used to ensure the final output is only from the randomness certified by some estimation process, which accounts for adversarial information. Here, we give an example of how our library can be used off-the-shelf in this scenario. "
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "773d60dd",
   "metadata": {},
   "source": [
    "## Semi-Device-Independent Heterodyne-Based QRNG"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "39dca44d",
   "metadata": {},
   "source": [
    "We consider the semi-device-independent quantum random number generator based on heterodyne detection [ATVV2021]_. \n",
    "This protocol is a semi-device-independent QRNG based on heterodyne detection that assumes an upper\n",
    "bound on the amount of energy generated states have, avoiding an identically and independently distribution type assumption on generated states.\n",
    "The protocol security is considered against classical side information only, so the randomness extractor need only be classical-proof. \n",
    "\n",
    "The experimental demonstration uses the :py:class:`.Toeplitz` extractor, with an input length of :math:`n = 6500000000`, \n",
    "input :term:`min-entropy <symbol>` of :math:`k= 581295000`, output length of :math:`m = 581294933`, extractor error of :math:`\\epsilon = 10^{-10}` and \n",
    "seed length :math:`d = 7081294932`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d3dc272f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cryptomite\n",
    "from math import log2, floor\n",
    "def randomness_extraction(seed_bits, raw_randomness, n = 6500000000, m = 581294933):\n",
    "  \"\"\" Perform randomness extraction for example QRNG. \n",
    "\n",
    "  Parameters\n",
    "  ----------\n",
    "  seed_bits : list of (uniformly random) bits statistically \n",
    "    independently of the bits generated in the protocol.\n",
    "  raw_randomness : list of bits from \n",
    "    the results of measurements in the QRNG \n",
    "    protocol based on heterodyne measurements. \n",
    "  n: integer, the number of raw randomness bits.\n",
    "  m: integer, the number of extractable bits, given \n",
    "    the error and min-entropy.\n",
    "\n",
    "  Returns\n",
    "  ---------\n",
    "  list of bits\n",
    "    The extracted output, which is \n",
    "    the shared secret key.\n",
    "  \"\"\"\n",
    "  toeplitz = cryptomite.Toeplitz(n, m)\n",
    "  return toeplitz.extract(seed_bits, raw_randomness)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "cqcenv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.8.6 (default, Sep 28 2020, 04:41:02) \n[Clang 11.0.3 (clang-1103.0.32.62)]"
  },
  "vscode": {
   "interpreter": {
    "hash": "387a14a3015d91e6279f9d63ff94ea7a45fc0dbedceff8d7a2a520a51eb61771"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
